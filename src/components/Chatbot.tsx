"use client";

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;

import { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { RootState } from "@/store/store";
import { addConversation } from "@/api/conversation";
import { fetchUserById } from "@/api/user";
import { fetchCourses } from "@/api/courses";
import ReactMarkdown from "react-markdown";
import { updatePath } from "@/api/learningPath";
import { useRef } from "react";

export default function Chatbot() {
    const [showChat, setShowChat] = useState(false);
    const [messages, setMessages] = useState<any[]>([]);
    const [input, setInput] = useState("");
    const [conversationId, setConversationId] = useState(null);

    const user = useSelector((state: RootState) => state.user.user);
    const userId: any = user?.id;
    const toggleChat = () => setShowChat((prev) => !prev);
    const chatBoxRef = useRef<HTMLDivElement>(null);

    function formatCourses(courseList, scores = []) {
        if (!Array.isArray(courseList) || courseList.length === 0) {
            return "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ph√π h·ª£p.";
        }

        return courseList
            .map((rawText, index) => {
                const item = JSON.parse(rawText); // Chuy·ªÉn t·ª´ string JSON th√†nh object
                return `[Course ${index + 1} begin]
    Name: ${item.title}
    Description: ${item.description}
    Objectives: ${item.objectives}
    Origin Price: ${item.price}
    Discounted Price: ${item.newPrice}
    Learning Outcomes: ${item.learning_outcomes}
    Level: ${item.level}
    Tags (Category): ${item.tags}
    Link: ${item.linkCourse || `http://localhost:3000/courses/${item.id}`}`;
            })
            .join("\n\n");
    }

    useEffect(() => {
        const initConversation = async () => {
            try {
                const response1 = await fetchCourses();
                console.log("üç™üç™üç™üç™", document.cookie);

                console.log(response1);
                const response = await addConversation(userId, "Chatbot");
                const data = await response.json();
                setConversationId(data.id);

                // L·∫•y l·ªãch s·ª≠ tin nh·∫Øn
                const messagesResponse = await fetch(
                    `${API_BASE_URL}/conversation/user/${userId}`
                );
                const messagesData = await messagesResponse.json();
                setMessages(
                    messagesData.map((msg) => ({
                        sender: msg.senderId === userId ? "user" : "bot",
                        text: msg.content,
                    }))
                );
            } catch (error) {
                console.error("‚ùå Error:", error);
            }
        };
        initConversation();
    }, [userId]);
    useEffect(() => {
        if (chatBoxRef.current) {
            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
        }
    }, [messages]);
    const removeVietnameseDiacritics = (str: string): string => {
        return str
            .normalize("NFD") // T√°ch d·∫•u kh·ªèi k√Ω t·ª± g·ªëc
            .replace(/[\u0300-\u036f]/g, "") // X√≥a c√°c d·∫•u
            .replace(/ƒë/g, "d") // Chuy·ªÉn "ƒë" th√†nh "d"
            .replace(/ƒê/g, "D"); // Chuy·ªÉn "ƒê" th√†nh "D"
    };

    let isRequestPath = false;

    const isCourseQuery = (message: any) => {
        const normalizedMessage = removeVietnameseDiacritics(
            message.normalize("NFC").toLowerCase()
        );
        const keywords = [
            "khoa hoc",
            "docs",
            "t√†i li·ªáu",
            "test",
            "b√†i ki·ªÉm tra",
            "lo trinh",
            "learning path",
        ].map((keyword) => removeVietnameseDiacritics(keyword.toLowerCase()));

        return keywords.some((keyword) => {
            const regex = new RegExp(`\\b${keyword}\\b`, "g");
            if (regex.test(normalizedMessage)) {
                if (keyword === "lo trinh" || keyword === "learning path") {
                    isRequestPath = true;
                }
                return true;
            }
            return false;
        });
    };

    const sendMessage = async () => {
        if (!input.trim()) return;

        const newMessage = { sender: "user", text: input };
        setMessages((prev) => [...prev, newMessage]);
        setInput("");

        try {
            // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
            await fetch(
                `${API_BASE_URL}/conversation/${conversationId}/message`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ senderId: userId, content: input }),
                }
            );

            // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang nh·∫≠p
            setMessages((prev) => [
                ...prev,
                {
                    sender: "bot",
                    text: "ƒêang t√¨m ki·∫øm th√¥ng tin...",
                    isTyping: true,
                },
            ]);

            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
            const userProfile = await fetchUserById(userId);
            console.log("üü¢ userProfile:", userProfile);

            // Kh·ªüi t·∫°o bi·∫øn vectorDB
            let relevantCourses = {
                results: [],
                scores: [],
                query_analysis: {},
            };

            // Ki·ªÉm tra xem c√≥ ph·∫£i h·ªèi v·ªÅ kh√≥a h·ªçc kh√¥ng
            const isQueryAboutCourses = isCourseQuery(input);
            console.log("üü¢ C√≥ ph·∫£i h·ªèi v·ªÅ kho√° h·ªçc:", isQueryAboutCourses);

            if (isQueryAboutCourses) {
                try {
                    // G·ªçi ƒë·∫øn vectorDB v·ªõi c√°c th√¥ng s·ªë
                    const findCoursesInVectorDB = await fetch(
                        `http://localhost:8000/search`,
                        {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                query: input,
                                top_k: 5,
                                // min_score: 0.3,
                                // filters: {
                                //     level:
                                //         userProfile?.skillLevel?.toLowerCase() ||
                                //         undefined,
                                // },
                            }),
                        }
                    );

                    // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ vectorDB
                    relevantCourses = await findCoursesInVectorDB.json();
                    console.log("üü¢ K·∫øt qu·∫£ vectorDB:", relevantCourses);
                } catch (error) {
                    console.error("‚ùå L·ªói khi t√¨m ki·∫øm kh√≥a h·ªçc:", error);
                }
            }

            // Format c√°c kh√≥a h·ªçc v·ªõi ƒëi·ªÉm s·ªë t∆∞∆°ng ·ª©ng
            let formatCoursesVar = "";
            if (relevantCourses.results && relevantCourses.results.length > 0) {
                formatCoursesVar = formatCourses(
                    relevantCourses.results,
                    relevantCourses.scores
                );
            }

            // T·∫°o prompt cho LLM
            const promptMessages = [
                ...messages.slice(-5).map((m) => ({
                    role: m.sender === "user" ? "user" : "assistant",
                    content: m.text,
                })),
                { role: "user", content: input },
            ];

            // Th√™m th√¥ng tin ng·ªØ c·∫£nh v√†o prompt
            if (
                relevantCourses.results &&
                relevantCourses.results.length > 0 &&
                userProfile
            ) {
                promptMessages.push({
                    role: "system",
                    content: `D∆∞·ªõi ƒë√¢y l√† th√¥ng tin h·ªçc vi√™n v√† c√°c kho√° h·ªçc ƒë∆∞·ª£c g·ª£i √Ω.
                    User level: ${userProfile.skillLevel}.
                    Specific goals: ${userProfile.specificGoals}.
                    Priority skills: ${userProfile.prioritySkills}.
                    Known vocabulary: ${userProfile.knownVocabulary}.
                    Assessment test results: ${userProfile.assessmentTest}.
                    Learning purpose: ${userProfile.learningPurpose}.
                    User goals: ${userProfile.learningGoals}.
                    Recommended courses: ${formatCoursesVar}.
                    T·ª´ nh·ªØng kho√° h·ªçc ƒë∆∞·ª£c g·ª£i √Ω n√†y, h√£y ch·ªçn nh·ªØng kho√° h·ªçc ph√π h·ª£p v·ªõi h·ªçc vi√™n, v√† ƒë∆∞a c·∫£ link kho√° h·ªçc.
                    Tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng ReactMarkdown.
                    
                    H√£y ph√¢n t√≠ch truy v·∫•n c·ªßa ng∆∞·ªùi d√πng v√† ch·ªçn nh·ªØng kh√≥a h·ªçc ph√π h·ª£p nh·∫•t. D√†nh ∆∞u ti√™n cho c√°c kh√≥a h·ªçc c√≥ ƒë·ªô ph√π h·ª£p cao nh·∫•t.
                    Gi·∫£i th√≠ch ng·∫Øn g·ªçn t·∫°i sao nh·ªØng kh√≥a h·ªçc n√†y ph√π h·ª£p v·ªõi nhu c·∫ßu v√† tr√¨nh ƒë·ªô c·ªßa ng∆∞·ªùi h·ªçc.
                    Nh·ªõ cung c·∫•p th√¥ng tin v·ªÅ gi√° g·ªëc, gi√° khuy·∫øn m√£i n·∫øu c√≥.
                    ƒê·∫£m b·∫£o ƒë∆∞a ra link ƒë·∫øn kh√≥a h·ªçc ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ d·ªÖ d√†ng truy c·∫≠p.
                    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† ƒë·ªãnh d·∫°ng theo ReactMarkdown.
                    H√£y s·ª≠ d·ª•ng vƒÉn phong chuy√™n nghi·ªáp, th√¢n thi·ªán v√† khuy·∫øn kh√≠ch.
                    `,
                });
            } else if (userProfile) {
                // N·∫øu kh√¥ng c√≥ kh√≥a h·ªçc ph√π h·ª£p ho·∫∑c kh√¥ng ph·∫£i c√¢u h·ªèi v·ªÅ kh√≥a h·ªçc
                promptMessages.push({
                    role: "system",
                    content: `D∆∞·ªõi ƒë√¢y l√† th√¥ng tin h·ªçc vi√™n.
                    T√™n ng∆∞·ªùi d√πng: ${userProfile.name || "kh√¥ng r√µ"}
                    Tr√¨nh ƒë·ªô: ${userProfile.skillLevel || "kh√¥ng r√µ"}.
                    M·ª•c ti√™u c·ª• th·ªÉ: ${userProfile.specificGoals || "kh√¥ng r√µ"}.
                    K·ªπ nƒÉng ∆∞u ti√™n: ${
                        userProfile.prioritySkills || "kh√¥ng r√µ"
                    }.
                    T·ª´ v·ª±ng ƒë√£ bi·∫øt: ${
                        userProfile.knownVocabulary || "kh√¥ng r√µ"
                    }.
                    K·∫øt qu·∫£ ki·ªÉm tra ƒë√°nh gi√°: ${
                        userProfile.assessmentTest || "kh√¥ng r√µ"
                    }.
                    M·ª•c ƒë√≠ch h·ªçc t·∫≠p: ${
                        userProfile.learningPurpose || "kh√¥ng r√µ"
                    }.
                    M·ª•c ti√™u ng∆∞·ªùi d√πng: ${
                        userProfile.learningGoals || "kh√¥ng r√µ"
                    }.
                    
                    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n v·ªÅ h·ªçc ti·∫øng Anh, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch.
                    H√£y ƒë·ªÅ xu·∫•t c√°c ph∆∞∆°ng ph√°p h·ªçc t·∫≠p, ngu·ªìn t√†i li·ªáu, ho·∫∑c l·ªùi khuy√™n ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô v√† m·ª•c ti√™u c·ªßa ng∆∞·ªùi h·ªçc.
                    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† ƒë·ªãnh d·∫°ng theo ReactMarkdown.
                    S·ª≠ d·ª•ng vƒÉn phong th√¢n thi·ªán, khuy·∫øn kh√≠ch v√† ƒë∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ.
                    `,
                });
            } else {
                // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng
                promptMessages.push({
                    role: "system",
                    content: `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n v·ªÅ h·ªçc ti·∫øng Anh, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch.
                    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† ƒë·ªãnh d·∫°ng theo ReactMarkdown.
                    S·ª≠ d·ª•ng vƒÉn phong th√¢n thi·ªán v√† khuy·∫øn kh√≠ch.
                    `,
                });
            }

            console.log("üü¢ promptMessages:", promptMessages);

            // G·ª≠i prompt ƒë·∫øn LLM
            const aiResponse = await fetch(
                "https://api.groq.com/openai/v1/chat/completions",
                {
                    method: "POST",
                    headers: {
                        Authorization: `Bearer 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`,
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        model: "llama3-8b-8192",
                        messages: promptMessages,
                        temperature: 0.7,
                        max_tokens: 2000,
                    }),
                }
            );

            const data = await aiResponse.json();
            const responseText =
                data.choices?.[0]?.message?.content?.trim() ||
                "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y!";

            console.log("üü¢ Ph·∫£n h·ªìi AI:", responseText);

            // C·∫≠p nh·∫≠t l·ªô tr√¨nh h·ªçc t·∫≠p n·∫øu ƒë√≥ l√† y√™u c·∫ßu v·ªÅ l·ªô tr√¨nh
            if (isRequestPath) {
                try {
                    await updatePath(userId, { pathDetails: responseText });
                    console.log("üü¢ ƒê√£ c·∫≠p nh·∫≠t l·ªô tr√¨nh h·ªçc t·∫≠p");
                } catch (error) {
                    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t l·ªô tr√¨nh:", error);
                }
            }

            // L∆∞u tin nh·∫Øn ph·∫£n h·ªìi t·ª´ bot
            await fetch(
                `${API_BASE_URL}/conversation/${conversationId}/message`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        senderId: null,
                        content: responseText,
                    }),
                }
            );

            // C·∫≠p nh·∫≠t UI v·ªõi tin nh·∫Øn bot m·ªõi v√† x√≥a tin nh·∫Øn "ƒëang nh·∫≠p"
            setMessages((prev) =>
                prev
                    .filter((msg) => !msg.isTyping) // X√≥a tin nh·∫Øn "ƒëang nh·∫≠p"
                    .concat([{ sender: "bot", text: responseText }])
            );
        } catch (error) {
            console.error("‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:", error);

            // X·ª≠ l√Ω l·ªói v√† c·∫≠p nh·∫≠t UI
            setMessages((prev) =>
                prev
                    .filter((msg) => !msg.isTyping)
                    .concat([
                        {
                            sender: "bot",
                            text: "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.",
                        },
                    ])
            );
        }
    };
    const formatMarkdown = (text: string) => {
        return text.replace(/-?\s*(http[^\s]+)/g, (_, url) => {
            return ` [Xem kh√≥a h·ªçc](${url})`;
        });
    };
    return (
        <>
            <button
                onClick={toggleChat}
                className="relative p-1.5 rounded-full focus:outline-none hover:bg-purple-100 transition-all duration-300"
            >
                <div className="relative">
                    <img
                        className="w-7 h-7"
                        src="/icons/chatbot.png"
                        alt="AI Assistant"
                    />
                    {!showChat && messages.length > 0 && (
                        <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center">
                            !
                        </span>
                    )}
                </div>
            </button>

            {showChat && (
                <div className="fixed top-64 right-10 w-1/3 h-[700px] bg-white rounded-xl shadow-xl p-4 border border-violet-300 flex flex-col animate-slideIn z-50">
                    <div className="flex justify-between items-center border-b border-violet-100 pb-2">
                        <div className="flex items-center">
                            <img
                                className="w-6 h-6 mr-2"
                                src="/icons/chatbot.png"
                                alt="AI Assistant"
                            />
                            <div className="text-lg font-semibold text-violet-700">
                                AI Assistant
                            </div>
                        </div>
                        <button
                            onClick={toggleChat}
                            className="text-2xl font-semibold hover:text-violet-500 transition-colors"
                        >
                            √ó
                        </button>
                    </div>

                    <div
                        ref={chatBoxRef}
                        className="chat-box text-sm flex-grow overflow-y-auto my-3 pr-2 h-full"
                    >
                        {messages.length === 0 ? (
                            <div className="text-center text-gray-700 p-3 py-20">
                                <h2 className="text-lg font-semibold text-violet-500 mb-3">
                                    Ch√†o m·ª´ng ƒë·∫øn v·ªõi Tr·ª£ L√Ω H·ªçc Ng√¥n Ng·ªØ!
                                </h2>
                                <img
                                    src="/icons/welcome.png"
                                    alt="Welcome"
                                    className="w-32 h-32 mx-auto mb-4 opacity-80"
                                />
                                <p className="text-sm mt-1 text-gray-600">
                                    T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:
                                </p>
                                <ul className="text-sm mt-2 space-y-1.5 list-disc list-inside text-violet-600 max-w-xs mx-auto text-left">
                                    <li>Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ h·ªçc ng√¥n ng·ªØ</li>
                                    <li>
                                        ƒê·ªÅ xu·∫•t l·ªô tr√¨nh h·ªçc t·∫≠p c√° nh√¢n h√≥a
                                    </li>
                                    <li>G·ª£i √Ω kh√≥a h·ªçc, t√†i li·ªáu h·ªçc t·∫≠p</li>
                                    <li>H·ªó tr·ª£ b·∫°n ƒë·∫°t m·ª•c ti√™u h·ªçc t·∫≠p</li>
                                </ul>
                                <p className="text-sm mt-4 text-gray-500">
                                    H√£y nh·∫Øn tin cho t√¥i ho·∫∑c ch·ªçn m·ªôt trong c√°c
                                    m·∫´u d∆∞·ªõi ƒë√¢y! üëá
                                </p>
                            </div>
                        ) : (
                            <div className="space-y-4">
                                {messages.map((msg, index) => (
                                    <div
                                        key={index}
                                        className={`flex ${
                                            msg.sender === "user"
                                                ? "justify-end"
                                                : "justify-start"
                                        }`}
                                    >
                                        {msg.sender === "bot" && (
                                            <div className="w-8 h-8 rounded-full overflow-hidden mr-2 flex-shrink-0">
                                                <img
                                                    src="/icons/chatbot.png"
                                                    alt="AI"
                                                    className="w-full h-full object-cover"
                                                />
                                            </div>
                                        )}
                                        <div
                                            className={`px-4 py-2 rounded-lg max-w-[80%] break-words ${
                                                msg.sender === "user"
                                                    ? "bg-violet-500 text-white"
                                                    : msg.isTyping
                                                    ? "bg-gray-200 text-gray-500 flex items-center"
                                                    : "bg-gray-100 text-gray-800"
                                            }`}
                                        >
                                            {msg.isTyping ? (
                                                <div className="typing-animation flex space-x-1">
                                                    <span className="dot animate-bounce">
                                                        ‚óè
                                                    </span>
                                                    <span
                                                        className="dot animate-bounce"
                                                        style={{
                                                            animationDelay:
                                                                "0.2s",
                                                        }}
                                                    >
                                                        ‚óè
                                                    </span>
                                                    <span
                                                        className="dot animate-bounce"
                                                        style={{
                                                            animationDelay:
                                                                "0.4s",
                                                        }}
                                                    >
                                                        ‚óè
                                                    </span>
                                                </div>
                                            ) : (
                                                <ReactMarkdown
                                                    components={{
                                                        h1: (props) => (
                                                            <h1
                                                                className="text-xl font-bold my-2"
                                                                {...props}
                                                            />
                                                        ),
                                                        h2: (props) => (
                                                            <h2
                                                                className="text-lg font-semibold my-2"
                                                                {...props}
                                                            />
                                                        ),
                                                        p: (props) => (
                                                            <p
                                                                className="text-base my-1.5"
                                                                {...props}
                                                            />
                                                        ),
                                                        ol: (props) => (
                                                            <ol
                                                                className="list-decimal ml-5 my-1.5"
                                                                {...props}
                                                            />
                                                        ),
                                                        ul: (props) => (
                                                            <ul
                                                                className="list-disc ml-5 my-1.5"
                                                                {...props}
                                                            />
                                                        ),
                                                        li: (props) => (
                                                            <li
                                                                className="my-0.5"
                                                                {...props}
                                                            />
                                                        ),
                                                        a: (props) => (
                                                            <a
                                                                className="text-blue-500 underline hover:text-blue-700"
                                                                target="_blank"
                                                                rel="noopener noreferrer"
                                                                {...props}
                                                            />
                                                        ),
                                                        blockquote: (props) => (
                                                            <blockquote
                                                                className="border-l-4 border-violet-300 pl-3 italic my-2 text-gray-600"
                                                                {...props}
                                                            />
                                                        ),
                                                        code: (props) => (
                                                            <code
                                                                className="bg-gray-200 px-1 rounded text-sm"
                                                                {...props}
                                                            />
                                                        ),
                                                        pre: (props) => (
                                                            <pre
                                                                className="bg-gray-800 text-white p-2 rounded my-2 overflow-x-auto text-sm"
                                                                {...props}
                                                            />
                                                        ),
                                                    }}
                                                >
                                                    {formatMarkdown(msg.text)}
                                                </ReactMarkdown>
                                            )}
                                        </div>
                                        {msg.sender === "user" && (
                                            <div className="w-8 h-8 rounded-full bg-violet-200 ml-2 flex items-center justify-center flex-shrink-0">
                                                <span className="text-violet-600 font-medium text-sm">
                                                    {user?.name?.[0]?.toUpperCase() ||
                                                        "U"}
                                                </span>
                                            </div>
                                        )}
                                    </div>
                                ))}
                                <div ref={chatBoxRef} />
                            </div>
                        )}
                        {messages.length === 0 && (
                            <div className="p-2 flex flex-wrap gap-2 mt-auto overflow-x-auto justify-center">
                                {[
                                    "L√†m sao ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc ti·∫øng Anh?",
                                    "Kh√≥a h·ªçc ph√π h·ª£p v·ªõi ng∆∞·ªùi m·ªõi?",
                                    "T·∫°o l·ªô tr√¨nh h·ªçc c√° nh√¢n ho√°",
                                    "L√†m sao ƒë·ªÉ luy·ªán ph√°t √¢m?",
                                    "T√†i li·ªáu h·ªçc IELTS hi·ªáu qu·∫£",
                                ].map((s, i) => (
                                    <button
                                        key={i}
                                        className="bg-violet-100 px-3 py-1.5 rounded-full text-sm hover:bg-violet-200 whitespace-nowrap transition-colors duration-200"
                                        onClick={() => {
                                            setInput(s);
                                            setTimeout(
                                                () => sendMessage(),
                                                100
                                            );
                                        }}
                                    >
                                        {s}
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>

                    <div className="flex border rounded-lg overflow-hidden focus-within:ring-2 focus-within:ring-violet-300 bg-gray-50">
                        <input
                            className="flex-1 p-2.5 focus:outline-none bg-transparent"
                            placeholder="Nh·∫≠p tin nh·∫Øn..."
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            onKeyDown={(e) =>
                                e.key === "Enter" && sendMessage()
                            }
                        />
                        <button
                            onClick={sendMessage}
                            disabled={!input.trim()}
                            className="p-2 text-white bg-violet-500 hover:bg-violet-600 disabled:bg-gray-300 transition-colors duration-200"
                        >
                            <img
                                src="/icons/send.png"
                                className="w-5 h-5"
                                alt="Send"
                            />
                        </button>
                    </div>
                    <div className="text-xs text-center text-gray-400 mt-2">
                        Powered by AI - Designed to help you learn better
                    </div>
                </div>
            )}

            <style jsx>{`
                .animate-slideIn {
                    animation: slideIn 0.3s ease-out;
                }

                @keyframes slideIn {
                    from {
                        opacity: 0;
                        transform: translateX(20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateX(0);
                    }
                }

                .dot {
                    font-size: 10px;
                }

                .typing-animation {
                    padding: 0 4px;
                }
            `}</style>
        </>
    );
}
